InstallViolationTable(violationTableName) ::= <<
  CREATE TABLE $violationTableName$ (
      vid int,
      rid varchar(255),
      tablename varchar(63),
      tupleid int,
      attribute varchar(63),
      value text
  )
>>

InstallRepairTable(repairTableName) ::= <<
    CREATE TABLE $repairTableName$ (
        id int,
        vid int,
        c1_tupleid int,
        c1_tablename varchar(63),
        c1_attribute varchar(63),
        c1_value text,
        op int,
        c2_tupleid int,
        c2_tablename varchar(63),
        c2_attribute varchar(63),
        c2_value text
    )
>>

InstallAuditTable(auditTableName) ::= <<
    CREATE TABLE $auditTableName$ (
        id serial primary key,
        vid int,
        tupleid int,
        tablename varchar(63),
        attribute varchar(63),
        oldvalue text,
        newvalue text,
        time timestamp
    )
>>

InstallTupleDegreeView(tupleDegreeViewName, violationTableName) ::= <<
    CREATE VIEW $tupleDegreeViewName$ as select tupleid, rid, count(distinct vid) as degree from $violationTableName$
    group by rid, tupleid
    order by degree desc;
>>

InstallCellDegreeView(cellDegreeViewName, violationTableName) ::= <<
    CREATE VIEW $cellDegreeViewName$ as select tupleid, attribute, count(distinct vid) as degree from $violationTableName$
    group by tupleid, attribute
    order by degree desc;
>>


CreateTableFromCSV(tableName, content) ::= <<
    CREATE TABLE $tableName$ (
        tid serial,
        $content$
    )
>>

InsertTableFromCSV(tableName, columns, values) ::= <<
    INSERT INTO $tableName$ ( $columns$ ) VALUES ($values$)
>>

CountTable(tableName) ::= <<
    SELECT COUNT(*) FROM $tableName$
>>

NextVid(tableName) ::= <<
    SELECT MAX(vid) + 1 as vid from $tableName$
>>

NextRepairCell(violationTableName, tupleDegreeViewName, cellDegreeViewName, offset ) ::= <<
select V.rid, V.tupleid, V.attribute, AVG(F1.degree) as tuple_degree, AVG(F2.degree) as cell_degree from $violationTableName$ as V, $tupleDegreeViewName$ as F1, $cellDegreeViewName$ as F2
where V.tupleid = F1.tupleid and V.rid=F1.rid and V.tupleid=F2.tupleid and V.attribute=F2.attribute
group by V.rid, V.tupleid, V.attribute
order by tuple_degree desc, cell_degree desc, V.rid, V.tupleid, V.attribute
limit 1 offset $offset$;
>>

NextRepairCellRandom(violationTableName, tupleDegreeViewName, cellDegreeViewName, offset ) ::= <<
select V.rid, V.tupleid, V.attribute, AVG(F1.degree) as tuple_degree, AVG(F2.degree) as cell_degree from $violationTableName$ as V, $tupleDegreeViewName$ as F1, $cellDegreeViewName$ as F2
where V.tupleid = F1.tupleid and V.rid=F1.rid and V.tupleid=F2.tupleid and V.attribute=F2.attribute
group by V.rid, V.tupleid, V.attribute
order by V.rid, V.tupleid, V.attribute
limit 1 offset $offset$;
>>
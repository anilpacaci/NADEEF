select tupleid, rid, count(*) as tupledegree from violation 
group by rid, tupleid
order by tupledegree

drop view tuple_degree;
drop view cell_degree;
CREATE VIEW tuple_degree as select tupleid, rid, count(distinct vid) as degree from violation 
group by rid, tupleid
order by degree desc;

CREATE VIEW cell_degree as select tupleid, attribute, count(distinct vid) as degree from violation
group by tupleid, attribute
order by degree desc;

select V.vid, V.rid, V.tupleid, V.attribute, F1.degree as tuple_degree, F2.degree as cell_degree from violation as V, tuple_degree as F1, cell_degree as F2
where V.tupleid = F1.tupleid and V.rid=F1.rid and V.tupleid=F2.tupleid and V.attribute=F2.attribute
order by tuple_degree desc, cell_degree desc limit 1; 

//repair:
while(size(violationtable) >0){
	select cell(tupleid, attribute) with top tupledegree, celldegree;
	check cell from clean-data-table
		if(cell is wrong){
			update cell in dirty-data-table;
			UpdataManager.update(cell, violation-table);
		}
	//add Feature-vector to Feature-vector-set;
}

